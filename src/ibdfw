#!/bin/bash
# Author: Alexis Ducastel <alexis@infrabuilder.com>

if [ -z "$SNAP" ]; then
    echo "SNAP not set"
    exit 1
fi

#===[ Configuration ]==========================================================

	CONFIG_DIR="$SNAP_COMMON/conf.d"

	APPDIR="$SNAP"
	MODULES="$APPDIR/modules"
	MODULES_OVERRIDE="$SNAP_COMMON/modules"
	PKGDIR="$APPDIR/packages" #TOREM

	LASTRULES="$SNAP_COMMON/last.rules"
	LASTDESC="$SNAP_COMMON/last.desc"

	RULES="$SNAP_COMMON/ibdfw.rules"
	DESC="$SNAP_COMMON/ibdfw.desc"

	ENABLE_FLAG="$SNAP_COMMON/enabled"

	IPTABLES="iptables"

	LOGFILE="/var/log/ibdfw.log"

#===[ Rules priority ]=========================================================

	# Blacklist => Trust => Serving => Needing
	# iptables is a lifo style rules list
	# Last rule applies first => revert order
	PRIO_PURGE="00"
	PRIO_LOW="01"
	PRIO_STD="02"
	PRIO_PKINIT="03"
	PRIO_NEEDING="04"
	PRIO_PINGABLE="05"
	PRIO_SERVING="06"
	PRIO_FORWARD="07"
	PRIO_TRUST="08"
	PRIO_PKDONE="09"
	PRIO_BLACKLIST="10"
	PRIO_DEFAULT="20"

	PRIORITIES="$PRIO_PURGE $PRIO_LOW $PRIO_STD $PRIO_PKINIT $PRIO_NEEDING $PRIO_PINGABLE $PRIO_SERVING $PRIO_FORWARD $PRIO_TRUST $PRIO_PKDONE $PRIO_BLACKLIST $PRIO_DEFAULT"

	# Aliases
	PRIO_NAT="$PRIO_STD"

#===[ Common functions ]=======================================================

	# Print error and exit
	function die { echo -e $* >&2 ; exit 1 ; }
	function log { echo -e "$(date "+%Y-%m-%d %H:%M:%S") $@" | tee -a $LOGFILE; }

#===[ Utilities functions ]====================================================

	# Count number of arguments
	function fw-count { echo $#; }

	# explode a string in $1 with separator defined in $2, extracting the $3th part
	function fw-explode {
		echo $1 |/usr/bin/awk "-F$2" '{print $'$3'}'
	}

	# Add an iptable rule with a priority of $1
	function fw-addRule {
		echo $IPTABLES ${*:2} >> $RULES.$1
	}

	# Add a description with priority of $1
	function fw-addDescription {
		echo ${*:2} >> $DESC.$1
	}

	function fw-isTargetFilter {
		echo "$1"|grep -E '^(not-)?(from|to|ports?)$' 2>&1 >/dev/null && echo "yes" || echo "no"
	}

	# iptables target filter parser
	function fw-targetFilter {
		targetFilter=""

		case "$1 $2" in
			"from ip") targetFilter="-s $3" ;;
			"from iprange") targetFilter="-m iprange --src-range $3" ;;
			"from interface") targetFilter="-i $3" ;;
			
			"not-from ip") targetFilter="! -s $3" ;;
			"not-from iprange") targetFilter="-m iprange ! --src-range $3" ;;
			"not-from interface") targetFilter="! -i $3" ;;
			
			"to ip") targetFilter="-d $3" ;;
			"to iprange") targetFilter="-m iprange --dst-range $3" ;;
			"to interface") targetFilter="-o $3" ;;
			
			"not-to ip") targetFilter="! -d $3" ;;
			"not-to iprange") targetFilter="-m iprange ! --dst-range $3" ;;
			"not-to interface") targetFilter="! -o $3" ;;

			"port tcp"|"ports tcp") targetFilter="-p tcp --match multiport --dports $3" ;;
			"port udp"|"ports udp") targetFilter="-p udp --match multiport --dports $3" ;;

			"not-port tcp"|"not-ports tcp") targetFilter="-p tcp --match multiport ! --dports $3" ;;
			"not-port udp"|"not-ports udp") targetFilter="-p udp --match multiport ! --dports $3" ;;

			*) exit 1 ;;
		esac

		echo "$targetFilter"
	}

	# Port parsing
	function fw-parsePort {

		# port is a simple number
		if [ "$(echo "$1" | tr -cd "[:digit:]")" = "$1" ]
		then
			echo "$1/tcp"
			return 0
		fi

		# already formatted port declaration
		echo $1 | grep -E "^[0-9]*/(tcp|udp|both)" > /dev/null
		if [ "$?" = "0" ]
		then
			if [ "$( fw-explode $1 / 2 )" = "both" ]
			then
				p="$( fw-explode $1 / 1 )"
				echo "$p/tcp $p/udp"
			else
				echo "$1"
			fi
			return 0
		fi

		# Searching in /etc/services
		p=$([ -f /etc/services ] && grep "^$1\s" /etc/services | /usr/bin/awk '{print $2}' |paste "-sd " | /bin/sed -e 's/^ *//g' -e 's/ *$//g')
		if [ "$p" != "" ]
		then
			echo $p
			return 0
		fi

		die "Cannot find port for $1"
	}

	function fw-parsePortList {
		ports=""
		for i in $( echo $1 | /bin/sed 's/,/ /g')
		do
			ports="$ports $(fw-parsePort $i)"
		done
		echo "$ports"
	}

#===[ Actions functions ]======================================================

	# Iptables rules list
	function fw-status { fw-isEnabled && echo "Firewall started" || echo "Firewall stopped" ; $(fw-isEnabled); }

	# Export generated iptables rules
	function fw-export { cat $RULES.* ; }

	# Display explanation on running rules
	function fw-explain { cat $DESC.* ; }

	# Compiling rules and executing
	function fw-exec {
		cat $DESC.* > $LASTDESC
		cat $RULES.* | tee $LASTRULES | bash
	}

	# Dropping rules and get back to default rules
	function fw-purge {
		for i in $PRIORITIES
		do
			[ -e $RULES.$i ] && rm $RULES.$i
			[ -e $DESC.$i ] && rm $DESC.$i
		done

		# Changing default rules to ACCEPT
		fw-addDescription $PRIO_PURGE Default all accept
		fw-addRule $PRIO_PURGE -P OUTPUT ACCEPT
		fw-addRule $PRIO_PURGE -P FORWARD ACCEPT
		fw-addRule $PRIO_PURGE -P INPUT ACCEPT

		# Flushing filter
		fw-addDescription $PRIO_PURGE Flushing table filter chains input,forward,output
		fw-addRule $PRIO_PURGE -F
		fw-addRule $PRIO_PURGE -X
		fw-addRule $PRIO_PURGE -Z

		# Flushing NAT
		fw-addDescription $PRIO_PURGE Flushing table nat chains input,forward,output
		fw-addRule $PRIO_PURGE -t nat -F
		fw-addRule $PRIO_PURGE -t nat -X
		fw-addRule $PRIO_PURGE -t nat -Z
	}

	# Applying standard common rules
	function fw-std {
		# Always authorize established
		fw-addDescription $PRIO_STD Mandatory established accept
		fw-addRule $PRIO_STD -I INPUT -j ACCEPT -m state --state ESTABLISHED,RELATED
		fw-addRule $PRIO_STD -I FORWARD -j ACCEPT -m state --state ESTABLISHED,RELATED
		fw-addRule $PRIO_STD -I OUTPUT -j ACCEPT -m state --state ESTABLISHED,RELATED

		# Always authorize loopback
		fw-addDescription $PRIO_STD Mandatory loopback accept
		fw-addRule $PRIO_STD -I INPUT -j ACCEPT -i lo
	}

	# Applying configurations
	function fw-fromconf {
		for i in $(ls -1 "$CONFIG_DIR/" |grep -E '.conf$')
		do
			CONFIG_FILE="$CONFIG_DIR/$i"
			source $CONFIG_FILE
		done
	}

	function fw-disable { echo "0" > $ENABLE_FLAG; }
	function fw-enable { echo "1" > $ENABLE_FLAG; }
	function fw-isEnabled { [ "$(cat $ENABLE_FLAG)" = "1" ]; }

	function fw-assertRights {
		
		if [ $EUID -gt 0 ]
		then
			die "ERROR: You need to be root to run this script"
		fi

		$IPTABLES -L >/dev/null 2>&1
		if [ $? -gt 0 ]
		then
			echo "Could not use iptables ($IPTABLES). Please run:"
			echo "  'sudo snap connect ibdfw:firewall-control'"
			exit 1
		fi
	}

	#function fw-test {
	#	[ "$1" = "" ] && die "Usage : ibdfw test <minutes>"
	#	log "ibdfw will automatically stop in $1 minutes, accepting all connections and stopping NAT ..."
	#	echo "$0 stop" | at "now + $1 minutes"
	#}

	function fw-version { 
		echo $SNAP_VERSION
	}

	# Display firewall usage
	function usage { 
		echo "ibdfw is an iptables based firewall rules manager"
		echo "  configuration files are located in $CONFIG_DIR/"
		echo "Commands :"
		#echo "	test <X> : Apply firewall configuration and automatically stop after <X> minutes"
		echo "	apply    : Apply firewall configuration and enable firewall"
		echo "	auto     : Apply firewall configuration only if previously enabled"
		echo "	stop     : Stop firewall configuration (filtering AND nat)"
		echo "	explain  : Display human readable configuration rules that would be applied"
		echo "	export   : Display iptables commands that would be applied"
		echo "	status   : Is firewall enabled or not"
		echo "	config   : Display a configuration file sample"
		echo "	version  : Display current version"
		exit
	}

	# Display some config sample
	function fw-config {
		cat "$APPDIR/conf.d/main.conf.sample" 
	}

	# Edit config
	function fw-edit {
		MAINCONF="$CONFIG_DIR/main.conf" 
		[ -e "$MAINCONF" ] || fw-config > "$MAINCONF"
		vim "$MAINCONF"
	}

	# 
	function fw-iptables {
		$IPTABLES $@
	}

	function fw-init {
		mkdir -p $CONFIG_DIR
		touch $ENABLE_FLAG
	}

#===[ Configuration available functions ]======================================

	# Chargement des modules
	for i in $(find "$MODULES"/* 2>/dev/null)
	do
		source "$i"
	done

	FILES=""
	[ -d "$MODULES_OVERRIDE" ] && FILES=$(find "$MODULES_OVERRIDE"/*  2>/dev/null)
	[ "$FILES" != ""  ] && for i in $(find "$MODULES_OVERRIDE"/*)
	do
		[ -r $i ] && source "$i"
	done

#===[ Main ]===================================================================

case $1 in
	auto) 	 fw-isEnabled && fw-assertRights && fw-purge && fw-std && fw-fromconf && fw-exec && fw-explain ; exit 0;;
	apply)	 fw-assertRights && fw-enable && fw-purge && fw-std && fw-fromconf && fw-exec && fw-explain ;;
	#test)	 fw-assertRights && fw-test $2 && fw-purge && fw-std && fw-fromconf && fw-exec && fw-explain ;;
	stop)	 fw-assertRights && fw-purge && fw-exec && fw-disable ;;
	export)  fw-assertRights && fw-purge && fw-std && fw-fromconf && fw-export ;;
	explain) fw-assertRights && fw-purge && fw-std && fw-fromconf && fw-explain ;;
	init)	 fw-init ;;
	status)	 fw-status ;;
	config)  fw-config ;;
	edit)    fw-edit ;;
	iptables)    fw-iptables $@;;
	version) fw-version ;;
	*)	usage && exit 0 ;;
esac
